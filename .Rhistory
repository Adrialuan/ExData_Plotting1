install.packages("KernSmooth")
library(KernSmooth)
install.packages(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
q()
swirl()
library('swirl')
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,5,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vappply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flagas$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?irirs
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
data(mtcars)
?mtcars
head(mtcars)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
plit(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
round(26.6636 - 15.1, digits = 0)
?solve
?inverse
set.seed(1)
rpois(5, 2)
library('swirl')
swirl()
ls()
class(plants)
dims(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plantss)
names(plants)
head(plants)
head(plants, 10)
tail(plats, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 1, replace = TRUE)
sample(c(0,1), 100, replace = TRUE, prov = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7 )
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10)
)
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?help
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stoping Distance)
""
"
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stoping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stoping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot"
)
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
library('swirl')
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df()
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran , size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, des(descending), ip_id)
arrange(cran2, country, desc(descending), ip_id)
arrange(cran2, country, desc(R.version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
head(cran3)
info(cran3)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, av_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_count_sorted <- arrange(top_counts, count)
top_count_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465
)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, -grade)
gather(Students, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value , -grade)
res <- gather(students2, sex_class, count , -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", class))
separate(res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
library(readr)
submit()
students4
submit()
submit
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed - passed %>% mutate(status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
EXIT
exit()
0
q()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages(""ggplot2"")
install.packages("ggplot2")
swirl()
swirl()
swirl()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
swirl()
head(pollution)
dim(pullution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col= "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm),col = "magenta",  lwd = 4)
names(pollution)
reg - pollution$region
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number if Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data= pollution , col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region = "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 17, minutes = 9)
this_moment
nyc <- now('America/New_York')
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive , "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
librayr
library(swirl)
swirl()
?Devices
width(faithful, plot(eruption, waiting))
with(faithful, plot(eruption, waiting))
with(faithful, plot(eruptions, waiting))
title("Old Faithiful Geyser data")
title(main = "Old Faithiful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
with(cars, plot(head(cars)))
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(ariquality)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City)
")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type = "n", airquality$Ozone)
title(main = "Wind an Ozone in NYC")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
may <- subset(airquality, months == 5)
may <- subset(airquality, months == "5")
head(airquality)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col = "blue", pch=2  )
points(may$Wind, may$Ozone, col = "blue", pch=17 )
notmay <- subset(airquality, Month != 5)
points(may$Wind, may$Ozone, col = "red", pch=12 )
points(notmay$Wind, notmay$Ozone, col = "red", pch=12 )
points(notmay$Wind, notmay$Ozone, col = "red", pch=8 )
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(median(airquality$Wind), lty=2, lwd = 2)
abline(v = median(airquality$Wind), lty=2, lwd = 2)
par(mfro=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main= "Ozone and WInd")
plot(airquality$Wind, airquality$Ozone, main= "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main= "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE )
setwd("C:/Users/Sistemas/ExData_Plotting1")
data <- read.table("household_power_consumption.txt", header = TRUE)
head(data)
dim(data)
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";")
head(data)
source("plot1.R")
source("plot1.R")
source("plot1.R")
source("plot1.R")
source("plot2.R")
source("plot2.R")
source("plot2.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
?png
